services:
  #####################
  # Book Service
  #####################
  book-service:
    restart: always
    build:
      context: .
      dockerfile: ./books/Dockerfile
    env_file: ./books/.env
    healthcheck:
      interval: 120s
      retries: 5
      start_period: 60s
      test: curl --fail http://localhost:3000 || exit 1
      timeout: 30s
    ports:
      - 3000:3000
    volumes:
      - ./books:/usr/src/books
      - /usr/src/books/node_modules
    networks:
      - api-gateway
    depends_on:
      - db
  #####################
  # Author Service
  #####################
  author-service:
    restart: always
    build:
      context: .
      dockerfile: ./authors/Dockerfile
    env_file: ./authors/.env
    healthcheck:
      interval: 120s
      retries: 5
      start_period: 60s
      test: curl --fail http://localhost:3001 || exit 1
      timeout: 30s
    ports:
      - 3001:3001
    volumes:
      - ./authors:/usr/src/authors
      - /usr/src/authors/node_modules
    networks:
      - api-gateway
    depends_on:
      - db
  #####################
  # Mongo Service
  #####################
  db:
    image: mongo
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/store --quiet
      interval: 60s
      timeout: 10s
      retries: 5
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/var/lib/data
    networks:
      - api-gateway
  #####################
  # krakend Service
  #####################
  proxy:
    image: krakend:latest
    volumes:
      - ./krakend/configs:/etc/krakend
    healthcheck:
      interval: 120s
      retries: 5
      start_period: 60s
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/__health || exit 1
      timeout: 30s
    ports:
      - 8080:8080
      - 8090:8090
    command: [ "run", "-d", "-c", "/etc/krakend/krakend.json" ]
    depends_on:
      - book-service
      - author-service
    networks:
      - api-gateway
  ######################
  # Volumes Persistent
  ######################
volumes:
  mongo-data:
    #########################
    # Networks Layer Protocol
    #########################
networks:
  api-gateway:
